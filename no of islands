class Solution {
    void mark_current_island(vector<vector<char>>&matrix,int x, int y, int r, int c){
        //base case
        if(x<0 || x>=r || y<0 || y>=c || matrix[x][y]!='1') //case for boundry matrix
        return ; 
        
        //mark current matrix as visisted
        matrix[x][y]='2';
        //now we have 4 choces L,R,T,D
        mark_current_island(matrix,x,y-1,r,c);//L
          mark_current_island(matrix,x,y+1,r,c);//R
          mark_current_island(matrix,x-1,y,r,c);//T
          mark_current_island(matrix,x+1,y,r,c);//D
    }
public:
    int numIslands(vector<vector<char>>& grid) {
        
       /* //foe fast IO
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        */
        
        
        int rows=grid.size();
        if(rows==0)
            return 0;
        int cols=grid[0].size();
        
        int no_of_islands=0; //initially
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                if(grid[i][j]=='1'){
                    mark_current_island(grid,i,j,rows,cols);
                    no_of_islands += 1;
}
            }
        }
        return no_of_islands;
        
    }
};
